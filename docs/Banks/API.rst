
.. _standardBankAPI:

Standard Bank API
=================

The standard bank API can be found at a public web address of every bank on the network. It's used to request transactions, get your transaction history, get or create subscriptions and more. Read the `entity table`_ to get the endpoint which is, for example, 'connect.bank.com'.


.. _apiAuthorisation:

Making authorised requests
==========================

In summary, for something to use the API, it must:

1. Join. A device requests access to a particular bank account. It generates a private key and gets assigned a device ID by the bank.
2. Using the private key and device ID, it creates the JSON API requests and signs them.
3. The above authorises the device but not necessarily a user, so a bank may require that a user is authorised too. This depends on a devices `privileges`_. User authorisation can happen in a variety of ways such as with a pin or, more ideally, biometrics.

The API uses a JSON message sent in a HTTPS POST request. These JSON messages are structured as modified JSON Web Signatures (https://tools.ietf.org/html/rfc7515). They are modified as they do not contain the public key data or selected algorithm; instead that information is only sent once when a device first joins (see `Device Joining`_). The typical container looks like this:

{
 "header": {
	"dvc": "9374-Wm42SmLWA"
   },
   "protected": "..",
   "payload": "..",
   "signature": ".."
}

:dvc
    The device ID which is assigned by the bank when the device first joins. Note that it is always textual; it contains randomised data to avoid any sequential number attacks. Of the form "Number-RandomData".

The message payload varies depending on the API being used.

The protected header is as follows:

{
  "non":"9Ema0R4..",
  "ses":"EwoApRms..",
  "acc":83947
}

:acc
    The bank assigned account ID it wants to use. This occurs because a single device can potentially use more than one account.

:ses
    A session token, originally generated by the device.

:non
    The replay nonce. This blocks a request from being simply repeated. The server gives the next one to use after each request the user makes.

:signature
    A signature of the request it's making, created using the device_ private key.

.. _device:

Device
======

Devices are things like phones, laptops, desktops or something more unexpected like a car or fridge. They store a special private key which is used to authenticate. Note that the private key never leaves the device; the private key and the public key are generated by the device. Each registered device has privileges_.

.. _privileges:

Privileges
==========

You might want certain devices to be restricted, so this is where privileges come in. For example, some devices may only need a read-only view of your account so they can analyse your transaction history. Others can be restricted to certain product categories (For example, a car can only purchase fuel).

.. _deviceJoin:

Device Joining
==============

In order for a device to be able to sign messages and use the API, it must first 'join'. The join process works like this:

- The device generates its new key pair (public key and private key)
- It sends the public key, a name, it's privilege requests and optionally the account that it would like to access.
- The API responds with the new device ID. From this point onwards, neither the public or private keys are sent.
- If an account ID was given, the bank tells the owner of the account that a join has been requested. This can happen in a variety of ways depending on the banks own choice, but it will usually be through some other joined device or a second channel method like an email/ sms/ phone call.

The lack of passwords here allows for much stronger security and a mechanism for 'unattended' objects like a self-driving car or a fridge to authenticate.
