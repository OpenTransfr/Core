<?php// This response is ordinary HTML:header('Content-Type: text/html');?><!doctype html><html><head><style>.inputBox{	padding:10px;	font-family: "SourceSansProLight","lucida grande",tahoma,verdana,arial,sans-serif;	border: 1px solid #ffffff;    border-radius: 4px;	width: 300px;	color: #000000;}body{	background:#0194E1;	font-family:"SourceSansProLight","lucida grande",tahoma,verdana,arial,sans-serif;	color:#ffffff;	font-size:1.4em;	margin:0;	border:0;	padding:0;}html{	overflow:auto;	margin:0;	border:0;	padding:0;}@font-face{    font-family:"SourceSansProLight";    src:url("/Font/SourceSansProLight.woff") format('woff');}a:link,a:visited{	color:#ffffff;	text-decoration:none;}.bigButton:hover,.outlineButton:hover,.menu:hover{	cursor:pointer;}.outlineButton,.bigButton{	display:inline-block;	padding:10px;	border:1px solid #ffffff;	border-radius:4px;}.bigButton{	margin-top:10px;}</style><!--[If IE]><style>@font-face{    font-family:"SourceSansProLight";    src:url("/Font/SourceSansProLight.eot");}</style><![endif]--></head><body><div style='padding:4%'><div id='progress_bar'></div><div style='padding:2%;'><div id='home'><h1>Hello! Welcome to the NORT root regulator.</h1><br>This regulator's purpose is to make sure the group it's in (NORT in this case) always consists of trustworthy nodes, as well as verifying transactions occuring in other roots. Entity's can become root nodes only if they are regulated by a regulator in the root node.<br><br><li> <a href='javascript:change("entity.check")'>Check if I'm regulated</a></li><br><br></div><div id='api_screen'></div></div></div><script type='text/javascript' src='/js/util.js'></script><script type='text/javascript'>var API={	Version:1,	Endpoint:'/',	Loading:'Loading - Just a moment..',	AvailableObjects:{}};window.hashchange=window.onhashchange=function(){		// Load the hash vars:	urlVariables=loadQueryString(window.location.hash.substring(1));		var s=urlVariables['screen'];		if(!s){s='';}		if(screen!=s){				change(s);			}		var m=urlVariables['section'];		if(m){m=parseInt(m);}else{m=0;}		if(currentMode!=m){				change(m);			}	};// Load the hash variables:var urlVariables={};// The current API screen:var screen='';// The elements:var api_screen=document.getElementById('api_screen');var home=document.getElementById('home');var currentMode=0;// JS and vars for the current page:var Page=null;function change(to){	if(typeof to==='string'){		if(to==screen){			return;		}				screen=to;				// Homepage?		if(screen=='home' || screen==''){			// Yep:			api_screen.innerHTML='';			home.style.display='';		}else{			// Nope - load api now!			home.style.display='none';						// Clear the progress indicator:			Progress.showIndicator();						api_screen.innerHTML='<h1>Loading - We\'ll just be a moment..</h1>';						// Load the content:			Ajax.request('/ui/screens/'+to.replace('.','/'),function(r){								// Write it to api_screen:				api_screen.innerHTML=r;								// Hide/show the modes:				changeMode(0);								// Grab any scripts and eval them now:				var s=api_screen.getElementsByTagName('script');								for(var i=0;i<s.length;i++){					var script=s[i];					eval(script.innerHTML);				}							});					}			}else{		changeMode(to);	}}function changeMode(mode){		window.location.hash="screen="+screen+'&section='+mode;		currentMode=mode;	var i=0;		if(Page && Page.onChangeMode){				Page.onChangeMode(mode);			}		while(true){		var box=document.getElementById(screen+'.'+i);				if(!box){			return;		}				if(i==mode){			box.style.display='';		}else{			box.style.display='none';		}				i++;			}	}var Entity={	endpoint:'',	key:null};function loadEntity(endpoint,privHex){	Entity.endpoint=endpoint;	loadKey(privHex);	Entity.key=currentKey;}/** Is the given object an API error?*/function isError(d){		if(d.type){		return true;	}else{		return false;	}	}var Error={	display:function(d){				return "API Errored:<br><br>"+JSON.stringify(d);			}};// Load the hash now:window.hashchange();</script></body></html>