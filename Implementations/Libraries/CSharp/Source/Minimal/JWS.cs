//--------------------------------------//             OpenTransfr////        For documentation or //    if you have any issues, visit//             opentrans.fr////          Licensed under MIT//--------------------------------------using System;using System.Text;using Wrench;namespace OpenTransfr{	/// <summary>	/// Used to build JWS objects.	/// </summary>	public static class JWS{				/// <summary>Builds a JWS from JSON objects.</summary>		public static JSObject Build(JSObject header,JSObject pHeader,JSObject payload,Signee signer){						// Get the time in ms:			ulong timeMS=Time.UnixTimeMs;						// Generate an ID:			string id=RandomString.Hex(20)+"@"+timeMS;						// Sign the ID. This is the public signature which will appear in the public change log:			string pubSig64=signer.Sign(id);						if(header==null){				// The header is almost always null; create a new one:				header=new JSArray();			}						if(pHeader==null){				// The protected header is almost always null; create a new one:				pHeader=new JSArray();			}						// Ask the signer to populate the JWS header - for example, putting the entity endpoint in there:			signer.GetJwsHeader(header);						// Add the pubsig, ID and sequence code to our protected header:			pHeader["id"]=new JSValue(id);			pHeader["pubsig"]=new JSValue(pubSig64);						if( !string.IsNullOrEmpty( signer.Sequence ) ){								// Apply the sequence code:				pHeader["seq"]=new JSValue(signer.Sequence);							}						// Base64 both strings:			string payload64=Base64.Encode( JSON.Stringify(payload) );			string pHeader64=Base64.Encode( JSON.Stringify(pHeader) );						if(payload64=="e30="){				// Strip the {} case (doesn't happen with the protected header).				payload64="";			}						// Sign the base64 strings combined with a .:			string signature64=signer.Sign(pHeader64+"."+payload64);						// Build the JWS itself:			JSArray jws=new JSArray();						// Add the values:			jws["header"]=header;			jws["payload"]=new JSValue(payload64);			jws["protected"]=new JSValue(pHeader64);			jws["signature"]=new JSValue(signature64);						return jws;		}			}	}